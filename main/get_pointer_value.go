package main

import "fmt"

//指针（pointer）概念在 Go 语言中被拆分为两个核心概念：
//类型指针，允许对这个指针类型的数据进行修改。传递数据使用指针，而无须拷贝数据。类型指针不能进行偏移和运算。
//切片，由指向起始元素的原始指针、元素数量和容量组成。

//可以声明指针指向任何类型的值来表明它的原始性或结构性；你可以在指针类型前面加上 * 号（前缀）来获取指针所指向的内容，
//这里的 * 号是一个类型更改器 使用一个指针引用一个值被称为间接引用
//当一个指针被定义后没有分配到任何变量时，它的值为 nil。一个指针变量通常缩写为 ptr。
//每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go 语言中使用&作符放在变量前面对变量进行“取地址”操作。

func main() {

	// 准备一个字符串类型
	var house = "golang 实习工程师"
	// 对字符串取地址, ptr类型为 *string  指针变量
	ptr := &house
	// 打印ptr的类型  指针变量的 类型是指针类型(*string)
	fmt.Printf("ptr type: %T\n", ptr)
	// 打印ptr的指针地址
	fmt.Printf("address: %p\n", ptr)
	// 对指针变量进行取值操作  取地址操作符&  和 取值操作符*是一对互补操作符，&取出地址，*根据地址取出地址指向的值。
	// *ptr
	value := *ptr
	// 取值后的类型
	fmt.Printf("value type: %T\n", value)
	// 指针取值后就是指向变量的值
	fmt.Printf("value: %s\n", value)

}
